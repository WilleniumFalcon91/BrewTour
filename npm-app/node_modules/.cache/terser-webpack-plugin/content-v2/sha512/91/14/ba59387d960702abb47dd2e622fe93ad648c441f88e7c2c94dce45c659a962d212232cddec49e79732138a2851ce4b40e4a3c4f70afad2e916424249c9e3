{"map":"{\"version\":3,\"sources\":[\"/Users/william_elliott/Desktop/BrewTour/npm-app/node_modules/url-loader/dist/cjs.js??ref--6-oneOf-0!/Users/william_elliott/Desktop/BrewTour/npm-app/src/ATLANTA-BEER-BUS-Logo.png\",\"/Users/william_elliott/Desktop/BrewTour/npm-app/src/App.js\",\"/Users/william_elliott/Desktop/BrewTour/npm-app/src/serviceWorker.js\",\"/Users/william_elliott/Desktop/BrewTour/npm-app/src/index.js\"],\"names\":[\"module\",\"exports\",\"__webpack_require__\",\"p\",\"App\",\"state\",\"content\",\"_this2\",\"this\",\"axios\",\"get\",\"then\",\"response\",\"console\",\"log\",\"newState\",\"Object\",\"assign\",\"data\",\"setState\",\"catch\",\"error\",\"react_default\",\"a\",\"createElement\",\"className\",\"src\",\"beerbus\",\"alt\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\"],\"mappings\":\"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8RCkDzBC,oNA3CbC,MAAQ,CACNC,QAAS,uFAGS,IAAAC,EAAAC,KAClBC,EAAAA,EACGC,IAAI,kCACJC,KAAK,SAAAC,GASJC,QAAQC,IAAI,aAAcF,GAI1B,IAAMG,EAAWC,OAAOC,OAAO,GAAIV,EAAKF,MAAO,CAC7CC,QAASM,EAASM,KAAKZ,UAIzBC,EAAKY,SAASJ,KAEfK,MAAM,SAAAC,GAAK,OAAIR,QAAQC,IAAIO,sCAI9B,OACEC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SAAA,CAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,MAAA,CAAKE,IAAKC,EAAAA,EAASF,UAAU,WAAWG,IAAI,SAC5CN,EAAAC,EAAAC,cAAA,KAAA,KAAA,YACAF,EAAAC,EAAAC,cAAA,KAAA,KAAKhB,KAAKH,MAAMC,kBArCRuB,EAAAA,YCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC\",\"sourcesContent\":[\"module.exports = __webpack_public_path__ + \\\"static/media/ATLANTA-BEER-BUS-Logo.71e2f47b.png\\\";\",\"import React, { Component } from \\\"react\\\";\\nimport axios from \\\"axios\\\";\\n// import logo from \\\"./logo.svg\\\";\\nimport beerbus from \\\"./ATLANTA-BEER-BUS-Logo.png\\\";\\nimport \\\"./App.css\\\";\\n\\nclass App extends Component {\\n  state = {\\n    content: []\\n  };\\n\\n  componentDidMount() {\\n    axios\\n      .get(\\\"http://localhost:8080/greeting\\\")\\n      .then(response => {\\n        // create an array of contacts only with relevant data\\n        // const newContent = response.data.map(item => {\\n        //   return {\\n        //     id: item.id,\\n        //     content: item.content\\n        //   };\\n        // });\\n\\n        console.log(\\\"response: \\\", response);\\n\\n        // create a new \\\"State\\\" object without mutating\\n        // the original State object.\\n        const newState = Object.assign({}, this.state, {\\n          content: response.data.content\\n        });\\n\\n        //store the new state object in the component's state\\n        this.setState(newState);\\n      })\\n      .catch(error => console.log(error));\\n  }\\n\\n  render() {\\n    return (\\n      <div className=\\\"App\\\">\\n        <header className=\\\"App-header\\\">\\n          <img src={beerbus} className=\\\"App-logo\\\" alt=\\\"logo\\\" />\\n          <h1>BrewTour</h1>\\n          <h1>{this.state.content}</h1>\\n        </header>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{14:function(e,t,n){e.exports=n.p+\"static/media/ATLANTA-BEER-BUS-Logo.71e2f47b.png\"},17:function(e,t,n){e.exports=n(44)},23:function(e,t,n){},43:function(e,t,n){},44:function(e,t,n){\"use strict\";n.r(t);var o=n(1),a=n.n(o),c=n(9),r=n.n(c),i=(n(23),n(10)),s=n(11),l=n(15),u=n(12),h=n(16),p=n(13),m=n.n(p),d=n(14),g=n.n(d),f=(n(43),function(e){function t(){var e,n;Object(i.a)(this,t);for(var o=arguments.length,a=new Array(o),c=0;c<o;c++)a[c]=arguments[c];return(n=Object(l.a)(this,(e=Object(u.a)(t)).call.apply(e,[this].concat(a)))).state={content:[]},n}return Object(h.a)(t,e),Object(s.a)(t,[{key:\"componentDidMount\",value:function(){var e=this;m.a.get(\"http://localhost:8080/greeting\").then(function(t){console.log(\"response: \",t);var n=Object.assign({},e.state,{content:t.data.content});e.setState(n)}).catch(function(e){return console.log(e)})}},{key:\"render\",value:function(){return a.a.createElement(\"div\",{className:\"App\"},a.a.createElement(\"header\",{className:\"App-header\"},a.a.createElement(\"img\",{src:g.a,className:\"App-logo\",alt:\"logo\"}),a.a.createElement(\"h1\",null,\"BrewTour\"),a.a.createElement(\"h1\",null,this.state.content)))}}]),t}(o.Component));Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));r.a.render(a.a.createElement(f,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[17,1,2]]]);","extractedComments":[]}